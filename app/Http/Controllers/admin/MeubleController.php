<?php

namespace App\Http\Controllers\admin;

use App\Http\Controllers\Controller;
use App\Models\AdresseLivraison;
use App\Models\Categorie;
use App\Models\Commande;
use App\Models\Couleur;
use App\Models\Meuble;
use App\Models\PanierItem;
use App\Models\PanierUtilisateur;
use App\Models\User;
use Dompdf\Dompdf;
use Illuminate\Http\Request;
use Illuminate\Http\Response;
use Illuminate\Support\Carbon;
use Stripe\Price;
use Stripe\Product;
use Stripe\Stripe;

class MeubleController extends Controller
{
//    public function index()
//    {
//        return parent::index(); // TODO: Change the autogenerated stub
//        return view('')
//    }
    public function index()
    {
        if (auth()->check()) {
            $user_id = auth()->id();

            $panierId = PanierUtilisateur::where('user_id', $user_id)
                ->where('actif', true)
                ->value('id');

            $countPanierItems = PanierItem::where('id_panier_utilisateur', $panierId)
                ->count();
        } else {
            $countPanierItems = null;
        }

        // Get the number of new users this week
        $newUsersThisWeek = User::whereBetween('created_at', [Carbon::now()->startOfWeek(), Carbon::now()->endOfWeek()])->count();

        // Get the number of new users last week
        $newUsersLastWeek = User::whereBetween('created_at', [Carbon::now()->subWeek()->startOfWeek(), Carbon::now()->subWeek()->endOfWeek()])->count();

        // Calculate the percentage difference between this week and last week, if last week had new users
        $diffPercent = 0;
        if ($newUsersLastWeek > 0) {
            $diffPercent = ($newUsersThisWeek - $newUsersLastWeek) / $newUsersLastWeek * 100;
        }

        // Get the number of active orders this week
        $activeOrdersThisWeek = Commande::whereBetween('created_at', [Carbon::now()->startOfWeek(), Carbon::now()->endOfWeek()])
            ->where('actif', 1)
            ->count();

// Get the number of active orders last week
            $activeOrdersLastWeek = Commande::whereBetween('created_at', [Carbon::now()->subWeek()->startOfWeek(), Carbon::now()->subWeek()->endOfWeek()])
                ->where('actif', 1)
                ->count();

// Calculate the percentage difference between this week and last week, if last week had active orders
            $diffPercentOrders = 0;
            if ($activeOrdersLastWeek > 0) {
                $diffPercentOrders = ($activeOrdersThisWeek - $activeOrdersLastWeek) / $activeOrdersLastWeek * 100;
            }

            // Get the number of active orders this week
            $executeOrdersThisWeek = Commande::whereBetween('created_at', [Carbon::now()->startOfWeek(), Carbon::now()->endOfWeek()])
                ->where('actif', 0)
                ->count();

// Get the number of active orders last week
            $exexuteOrdersLastWeek = Commande::whereBetween('created_at', [Carbon::now()->subWeek()->startOfWeek(), Carbon::now()->subWeek()->endOfWeek()])
                ->where('actif', 0)
                ->count();

// Calculate the percentage difference between this week and last week, if last week had active orders
            $diffPercentOrdersExecute = 0;
            if ($exexuteOrdersLastWeek > 0) {
                $diffPercentOrdersExecute = ($executeOrdersThisWeek - $exexuteOrdersLastWeek) / $exexuteOrdersLastWeek * 100;
            }

            $meubles = Meuble::all()->count();

            return view('admin.admin', compact('countPanierItems', 'newUsersThisWeek', 'diffPercent', 'activeOrdersThisWeek', 'meubles', 'diffPercentOrders', 'diffPercentOrdersExecute', 'executeOrdersThisWeek'));
    }

    public function viewCommandes()
    {
        if (auth()->check()) {
            $user_id = auth()->id();

            $panierId = PanierUtilisateur::where('user_id', $user_id)
                ->where('actif', true)
                ->value('id');

            $countPanierItems = PanierItem::where('id_panier_utilisateur', $panierId)
                ->count();
        } else {
            $countPanierItems = null;
        }

        $commandes = Commande::paginate(10);

        foreach ($commandes as $commande) {
            $panierItems = PanierItem::where('id_panier_utilisateur', $commande->id)->get();

            $meubles = array();
            foreach ($panierItems as $item) {
                $meuble = Meuble::find($item->id_item);
                $meubles[] = $meuble;
            }

            $total = 0;
            foreach ($meubles as $key => $meuble) {
                $prixTotal = $meuble->prix * $panierItems[$key]->quantite;
                $total += $prixTotal;
            }
            $commande->prix_total = $total;
        }


        return view('admin.commandes', compact('countPanierItems', 'commandes'));
    }

    public function viewCommandesPDF($id)
    {
        // Récupérer les données nécessaires depuis la méthode voirPanierRecapitulatif
        $user_id = auth()->id();
        $panier = PanierUtilisateur::where('user_id', $user_id)
            ->latest('updated_at')
            ->first();
        $commande = Commande::where('utilisateur_commande', $user_id)
            ->where('pannier_commande', $id)
            ->first();
        $panierItems = PanierItem::where('id_panier_utilisateur', $id)->get();
        $meubles = array();
        foreach ($panierItems as $item) {
            $meuble = Meuble::find($item->id_item);
            $meubles[] = $meuble;
        }
        $adresseLivraison = null;
        if ($commande) {
            $adresseLivraison = AdresseLivraison::find($commande->adresse_livraison);
        }
        $total = 0;
        foreach ($meubles as $key => $meuble) {
            $prixTotal = $meuble->prix * $panierItems[$key]->quantite;
            $total += $prixTotal;
        }

        // Générer le PDF
        $html = view('panier.pdfRecap', compact('adresseLivraison', 'panierItems', 'commande', 'meubles', 'total'))->render();
        $dompdf = new Dompdf();
        $dompdf->loadHtml($html);
        $dompdf->setPaper('A4', 'portrait');
        $dompdf->render();

        // Renvoyer le PDF en téléchargement
        $filename = 'recapitulatif-commande-'.$commande->numero_commande.'.pdf';
        return new Response($dompdf->output(), 200, [
            'Content-Type' => 'application/pdf',
            'Content-Disposition' => 'attachment; filename="'.$filename.'"',
        ]);
    }

    public function supprimerCommandes($id){
        $commande = Commande::findOrFail($id);
        $commande->delete();

        return redirect()->route('view-commandes')->with('success', 'Le meuble a été supprimé avec succès.');
    }

    public function viewAjoutMeuble(Request $request)
    {
        if (auth()->check()) {
            $user_id = auth()->id();

            $panierId = PanierUtilisateur::where('user_id', $user_id)
                ->where('actif', true)
                ->value('id');

            $countPanierItems = PanierItem::where('id_panier_utilisateur', $panierId)
                ->count();
        }else{
            $countPanierItems = null;
        }
        $categories = Categorie::all();
        $couleurs = Couleur::all();
        $meubles = Meuble::all();
        $sortOrder = 'asc'; // Valeur par défaut
        if(request()->has('sort_order')){
            $sortOrder = request()->query('sort_order');
        }

        $meubles = Meuble::orderBy('nom', $sortOrder)->paginate(5);


        return view('admin.meuble', compact('meubles', 'sortOrder', 'categories', 'couleurs', 'countPanierItems'));

    }

    public function enregistrer_meuble(Request $request)
    {
        Stripe::setApiKey('sk_test_51N3dWDGHcD5THvo56jH6WSO54RMQkX5TKzp02g4lz0uIlZatSkw02T6yTfIjsMJCWg7FcZIAy4NAqVfV6JOnZP3O00dyopFRZD');

        $images = array();
        foreach($request->file('images') as $image) {
            $fileName = uniqid() . '_' . $image->getClientOriginalName();
            $image->move(public_path('public'), $fileName); // utilise public_path() pour sauvegarder les images dans le dossier public
            array_push($images, $fileName);
        }

        // Créer le produit dans Stripe
        $product = Product::create([
            'name' => $request->nom,
            'type' => 'good',
            'images' => [$images[0]],
            'metadata' => [
                'stock' => $request->stock,
                'nom_produit' => $request->nom,
            ],
        ]);

        $price = Price::create([
            'product' => $product->id,
            'unit_amount' => $request->prix * 100,
            'currency' => 'eur',
            'metadata' => [
                'stock' => $request->stock,
                'nom_produit' => urlencode($request->nom), // Encoder le nom du produit en utilisant urlencode()
            ],
        ]);

        Meuble::create([
            'nom' => $request->nom,
            'categorie' => $request->categorie,
            'couleur_id' => $request->couleur,
            'description' => $request->description,
            'stock' => $request->stock,
            'prix' => $request->prix,
            'photo1' => $images[0],
            'photo2' => isset($images[1]) ? $images[1] : null,
            'photo3' => isset($images[2]) ? $images[2] : null,
            'stripe_product_id' => $product->id,
            'stripe_price_id' => $price->id,
        ]);

        return redirect("admin/ajouter_meubles");
    }


    public function getMeuble($id)
    {
        if (auth()->check()) {
            $user_id = auth()->id();

            $panierId = PanierUtilisateur::where('user_id', $user_id)
                ->where('actif', true)
                ->value('id');

            $countPanierItems = PanierItem::where('id_panier_utilisateur', $panierId)
                ->count();
        }else{
            $countPanierItems = null;
        }
        $categories = Categorie::all();
        $couleurs = Couleur::all();
        $meuble = Meuble::findOrFail($id);
        return view('admin.meubleDetail', compact('meuble','couleurs','categories','countPanierItems'));
    }

    public function modifierMeuble(Request $request, $id)
    {
        $meuble = Meuble::findOrFail($id);

        if ($request->hasFile('images')) {
            if ($meuble->photo1) {
                unlink(public_path('public/' . $meuble->photo1));
            }
            if ($meuble->photo2) {
                unlink(public_path('public/' . $meuble->photo2));
            }
            if ($meuble->photo3) {
                unlink(public_path('public/' . $meuble->photo3));
            }
        }

        $images = array();
        if ($request->hasFile('images')) {
            foreach($request->file('images') as $image) {
                $fileName = uniqid() . '_' . $image->getClientOriginalName();
                $image->move(public_path('public'), $fileName);
                array_push($images, $fileName);
            }

            $meuble->photo1 = $images[0];
            $meuble->photo2 = isset($images[1]) ? $images[1] : null;
            $meuble->photo3 = isset($images[2]) ? $images[2] : null;
        }

        $meuble->nom = $request->nom;
        $meuble->categorie = $request->categorie;
        $meuble->couleur_id = $request->couleur;
        $meuble->description = $request->description;
        $meuble->stock = $request->stock;
        $meuble->prix = $request->prix;

        $meuble->save();

        return redirect()->route('meuble.afficher', ['id' => $meuble->id])->with('success', 'Le meuble a été modifié avec succès.');
    }


    public function supprimerMeuble($id)
    {
        $meuble = Meuble::findOrFail($id);
        $meuble->delete();

        return redirect()->route('ajouter_meubles')->with('success', 'Le meuble a été supprimé avec succès.');
    }


    public function viewCategorie()
    {
        if (auth()->check()) {
            $user_id = auth()->id();

            $panierId = PanierUtilisateur::where('user_id', $user_id)
                ->where('actif', true)
                ->value('id');

            $countPanierItems = PanierItem::where('id_panier_utilisateur', $panierId)
                ->count();
        }else{
            $countPanierItems = null;
        }
        $categories = Categorie::all();
        $categories = Categorie::orderBy('label', 'asc')->paginate(5);

        return view('admin.categorie',compact( 'categories','countPanierItems'));
    }

    public function viewCouleur()
    {
        if (auth()->check()) {
            $user_id = auth()->id();

            $panierId = PanierUtilisateur::where('user_id', $user_id)
                ->where('actif', true)
                ->value('id');

            $countPanierItems = PanierItem::where('id_panier_utilisateur', $panierId)
                ->count();
        }else{
            $countPanierItems = null;
        }

        $couleurs = Couleur::all();

        $couleurs = Couleur::orderBy('label', 'asc')->paginate(5);
        return view('admin.couleur', compact( 'couleurs','countPanierItems'));
    }
}
