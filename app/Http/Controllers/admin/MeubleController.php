<?php

namespace App\Http\Controllers\admin;

use App\Http\Controllers\Controller;
use App\Models\Categorie;
use App\Models\Couleur;
use App\Models\Meuble;
use App\Models\PanierItem;
use App\Models\PanierUtilisateur;
use Illuminate\Http\Request;
use Stripe\Price;
use Stripe\Product;
use Stripe\Stripe;

class MeubleController extends Controller
{
//    public function index()
//    {
//        return parent::index(); // TODO: Change the autogenerated stub
//        return view('')
//    }

    public function index()
    {
        if (auth()->check()) {
            $user_id = auth()->id();

            $panierId = PanierUtilisateur::where('user_id', $user_id)
                ->where('actif', true)
                ->value('id');

            $countPanierItems = PanierItem::where('id_panier_utilisateur', $panierId)
                ->count();
        }else{
            $countPanierItems = null;
        }

        return view('admin.admin', compact('countPanierItems'));
    }

    public function viewAjoutMeuble(Request $request)
    {
        if (auth()->check()) {
            $user_id = auth()->id();

            $panierId = PanierUtilisateur::where('user_id', $user_id)
                ->where('actif', true)
                ->value('id');

            $countPanierItems = PanierItem::where('id_panier_utilisateur', $panierId)
                ->count();
        }else{
            $countPanierItems = null;
        }
        $categories = Categorie::all();
        $couleurs = Couleur::all();
        $meubles = Meuble::all();
        $sortOrder = 'asc'; // Valeur par défaut
        if(request()->has('sort_order')){
            $sortOrder = request()->query('sort_order');
        }

        $meubles = Meuble::orderBy('nom', $sortOrder)->paginate(5);


        return view('admin.meuble', compact('meubles', 'sortOrder', 'categories', 'couleurs', 'countPanierItems'));

    }

    public function enregistrer_meuble(Request $request)
    {
        Stripe::setApiKey('sk_test_51N3dWDGHcD5THvo56jH6WSO54RMQkX5TKzp02g4lz0uIlZatSkw02T6yTfIjsMJCWg7FcZIAy4NAqVfV6JOnZP3O00dyopFRZD');

        $images = array();
        foreach($request->file('images') as $image) {
            $fileName = uniqid() . '_' . $image->getClientOriginalName();
            $image->move(public_path('public'), $fileName); // utilise public_path() pour sauvegarder les images dans le dossier public
            array_push($images, $fileName);
        }

        // Créer le produit dans Stripe
        $product = Product::create([
            'name' => $request->nom,
            'type' => 'good',
            'images' => [$images[0]],
            'metadata' => [
                'stock' => $request->stock,
                'nom_produit' => $request->nom,
            ],
        ]);

        $price = Price::create([
            'product' => $product->id,
            'unit_amount' => $request->prix * 100,
            'currency' => 'eur',
            'metadata' => [
                'stock' => $request->stock,
                'nom_produit' => urlencode($request->nom), // Encoder le nom du produit en utilisant urlencode()
            ],
        ]);

        Meuble::create([
            'nom' => $request->nom,
            'categorie' => $request->categorie,
            'couleur_id' => $request->couleur,
            'description' => $request->description,
            'stock' => $request->stock,
            'prix' => $request->prix,
            'photo1' => $images[0],
            'photo2' => isset($images[1]) ? $images[1] : null,
            'photo3' => isset($images[2]) ? $images[2] : null,
            'stripe_product_id' => $product->id,
            'stripe_price_id' => $price->id,
        ]);

        return redirect("admin/ajouter_meubles");
    }


    public function getMeuble($id)
    {
        if (auth()->check()) {
            $user_id = auth()->id();

            $panierId = PanierUtilisateur::where('user_id', $user_id)
                ->where('actif', true)
                ->value('id');

            $countPanierItems = PanierItem::where('id_panier_utilisateur', $panierId)
                ->count();
        }else{
            $countPanierItems = null;
        }
        $categories = Categorie::all();
        $couleurs = Couleur::all();
        $meuble = Meuble::findOrFail($id);
        return view('admin.meubleDetail', compact('meuble','couleurs','categories','countPanierItems'));
    }

    public function modifierMeuble(Request $request, $id)
    {
        $meuble = Meuble::findOrFail($id);

        // Supprime les anciennes images
        if ($meuble->photo1) {
            unlink(public_path('public/' . $meuble->photo1));
        }
        if ($meuble->photo2) {
            unlink(public_path('public/' . $meuble->photo2));
        }
        if ($meuble->photo3) {
            unlink(public_path('public/' . $meuble->photo3));
        }

        $images = array();
        foreach($request->file('images') as $image) {
            $fileName = uniqid() . '_' . $image->getClientOriginalName();
            $image->move(public_path('public'), $fileName);
            array_push($images, $fileName);
        }

        $meuble->nom = $request->nom;
        $meuble->categorie = $request->categorie;
        $meuble->couleur = $request->couleur;
        $meuble->description = $request->description;
        $meuble->stock = $request->stock;
        $meuble->prix = $request->prix;
        $meuble->photo1 = $images[0];
        $meuble->photo2 = isset($images[1]) ? $images[1] : null;
        $meuble->photo3 = isset($images[2]) ? $images[2] : null;
        $meuble->save();

        return redirect()->route('meuble.afficher', ['id' => $meuble->id])->with('success', 'Le meuble a été modifié avec succès.');
    }


    public function supprimerMeuble($id)
    {
        $meuble = Meuble::findOrFail($id);
        $meuble->delete();

        return redirect()->route('ajouter_meubles')->with('success', 'Le meuble a été supprimé avec succès.');
    }


    public function viewCategorie()
    {
        if (auth()->check()) {
            $user_id = auth()->id();

            $panierId = PanierUtilisateur::where('user_id', $user_id)
                ->where('actif', true)
                ->value('id');

            $countPanierItems = PanierItem::where('id_panier_utilisateur', $panierId)
                ->count();
        }else{
            $countPanierItems = null;
        }
        $categories = Categorie::all();
        $categories = Categorie::orderBy('label', 'asc')->paginate(5);

        return view('admin.categorie',compact( 'categories','countPanierItems'));
    }

    public function viewCouleur()
    {
        if (auth()->check()) {
            $user_id = auth()->id();

            $panierId = PanierUtilisateur::where('user_id', $user_id)
                ->where('actif', true)
                ->value('id');

            $countPanierItems = PanierItem::where('id_panier_utilisateur', $panierId)
                ->count();
        }else{
            $countPanierItems = null;
        }

        $couleurs = Couleur::all();

        $couleurs = Couleur::orderBy('label', 'asc')->paginate(5);
        return view('admin.couleur', compact( 'couleurs','countPanierItems'));
    }
}
